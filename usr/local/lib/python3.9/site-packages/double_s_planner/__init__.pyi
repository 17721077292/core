from typing import List, Tuple

def solve_cubic(
    a: float, b: float, c: float, d: float, x_min: float, x_max: float
) -> float: ...
def solve_quadratic(
    a: float, b: float, c: float, x_min: float, x_max: float
) -> float: ...
def calculate_time(
    q_start: float,
    v_start: float,
    q_current: float,
    v_current: float,
    q_next: float,
    q_target: float,
    v_starget: float,
    v_max: float,
    a_max: float,
    j_max: float,
    v_min: float,
    a_min: float,
    j_min: float,
) -> Tuple[float, float]: ...
def enable_logging() -> None: ...
def disable_logging() -> None: ...

class Planner:
    def __init__(
        self,
        v_max: float,
        a_max: float,
        j_max: float,
        v_min: float,
        a_min: float,
        j_min: float,
    ) -> None: ...
    def buff_acceleration(
        self, q_0: float, v_0: float, a_0: float, T0: float, N: int
    ) -> Tuple[
        float,
        float,
        float,
        List[float],
        List[float],
        List[float],
        List[float],
        List[float],
    ]: ...
    def double_s_planner(
        self,
        v_0: float,
        q_0: float,
        v_1: float,
        q_1: float,
        T0: float,
        N: int,
    ) -> Tuple[
        float,
        float,
        float,
        float,
        float,
        float,
        float,
        float,
        float,
        List[float],
        List[float],
        List[float],
        List[float],
        List[float],
    ]: ...
    def calc_double_s_stages(
        self,
        v_0: float,
        q_0: float,
        v_1: float,
        q_1: float,
        T0: float,
    ) -> Tuple[float, float, float, float, float, float, float, float, float,]: ...
    def calc_t_and_v_at(
        self,
        q: float,
        v_0: float,
        q_0: float,
        v_1: float,
        q_1: float,
        T: float,
        Ta: float,
        Td: float,
        Tv: float,
        Tj_a: float,
        Tj_d: float,
        v_limit: float,
        a_limit_a: float,
        a_limit_d: float,
    ) -> Tuple[float, float]: ...
    def calc_t_and_v_to_next(
        self,
        q_start: float,
        v_start: float,
        q_current: float,
        q_next: float,
        q_target: float,
        v_target: float,
    ) -> Tuple[float, float]: ...
